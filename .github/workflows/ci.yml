name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: 20.19.1
  YARN_VERSION: 4.9.1

jobs:
  prepare:
    name: Prepare Yarn once
    runs-on: ubuntu-latest

    steps:

      - name: Setup Yarn once
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Check Yarn version
        run: yarn --version
  # ---------------------------------------
  # 1. Lint & Type-Check (monorepo-wide)
  # ---------------------------------------
  lint:
    name: Lint & Type-Check
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      # - name: Lint workspace
      #   run: yarn lint

      # - name: TypeScript check
      #   run: |
      #     yarn workspace node tsc --noEmit
      #     yarn workspace react-app tsc --noEmit
      #     yarn workspace ng-app tsc --noEmit

  # ---------------------------------------
  # 2. Backend Tests (Node)
  # ---------------------------------------
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [prepare, lint]
    defaults:
      run:
        working-directory: packages/node
        
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run Jest tests
        run: yarn test

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: packages/node/coverage

  # ---------------------------------------
  # 3. Frontend Tests (React & Angular)
  # ---------------------------------------
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [prepare, lint]
    strategy:
      matrix:
        workspace: [react-app, ng-app]
    defaults:
      run:
        working-directory: packages/${{ matrix.workspace }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests & coverage
        run: |
          if [ "${{ matrix.workspace }}" = "react-app" ]; then
            yarn test
          else
            yarn test --watch=false --browsers=ChromeHeadless
          fi

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.workspace }}
          path: packages/${{ matrix.workspace }}/coverage

  # ---------------------------------------
  # 4. E2E Tests (Playwright)
  # ---------------------------------------
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [prepare, test-backend, test-frontend]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
 
      - name: Enable Corepack
        run: corepack enable
       
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          yarn workspace node start &
          sleep 5

      - name: Run E2E tests
        run: yarn e2e

      - name: Wait for backend to be ready
        run: npx wait-on http://localhost:3001/users

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

  # ---------------------------------------
  # 5. Coverage Comment (optional)
  # ---------------------------------------
  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    needs: [prepare, test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    continue-on-error: true

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend
          path: coverage/backend

      - uses: actions/download-artifact@v4
        with:
          name: coverage-react-app
          path: coverage/react

      - uses: actions/download-artifact@v4
        with:
          name: coverage-ng-app
          path: coverage/ng

      - name: Comment coverage on PR
        run: echo "Coverage comment logic goes here"
        
  # ---------------------------------------
  # 6. SonarCloud Analysis (optional)
  # ---------------------------------------
  sonarcloud:
    name: Analyse SonarCloud
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [prepare, test-backend, test-frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java (SonarCloud requirement)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
        
      - name: Install dependencies
        run: yarn install --immutable

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.9.0
        with:
          organization: ${{ secrets.ORG_KEY }}
          token: ${{ secrets.SONAR_TOKEN }}
          projectKey: ${{ secrets.PROJECT_KEY }}
          projectName: ${{ secrets.PROJECT_NAME }}

  # ---------------------------------------
  # 7. Deploy to Heroku (optional)
  # ---------------------------------------
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test-backend]
    defaults:
      run:
        working-directory: packages/node

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare correct Yarn version
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Deploy to Heroku
        uses: appleboy/heroku-action@v0.2.0
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false

  # ---------------------------------------
  # 8. Deploy to Netlify (optional)   
  # ---------------------------------------
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test-frontend]
    defaults:
      run:
        working-directory: packages/react-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare correct Yarn version
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build React App
        run: yarn build

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --site ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --prod --dir build
